#ifndef STORAGE_LEVELDB_UTIL_BLOOM_FILTER_H_
#define STORAGE_LEVELDB_UTIL_BLOOM_FILTER_H_

#include <cstddef>
#include <cstdint>
#include <random>
#include <atomic>
#include "leveldb/slice.h"
namespace leveldb {

static uint32_t MurmurHash2_ ( const void * key, int len, uint32_t seed )
{
  /* 'm' and 'r' are mixing constants generated offline.
     They're not really 'magic', they just happen to work well.  */

  const uint32_t m = 0x5bd1e995;
  const int r = 24;

  /* Initialize the hash to a 'random' value */

  uint32_t h = seed ^ len;

  /* Mix 4 bytes at a time into the hash */

  const unsigned char * data = (const unsigned char *)key;

  while(len >= 4)
  {
    uint32_t k = *(uint32_t*)data;

    k *= m;
    k ^= k >> r;
    k *= m;

    h *= m;
    h ^= k;

    data += 4;
    len -= 4;
  }

  /* Handle the last few bytes of the input array  */

  switch(len)
  {
  case 3: h ^= data[2] << 16;
  case 2: h ^= data[1] << 8;
  case 1: h ^= data[0];
      h *= m;
  };

  /* Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.  */

  h ^= h >> 13;
  h *= m;
  h ^= h >> 15;

  return h;
} 

static uint32_t MurMurHash2(const char* c, size_t size){
    return MurmurHash2_(c, size, 0x19990412);
}

class BloomFilterPolicy final {
 public:
  explicit BloomFilterPolicy(int bits_per_key = 10) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  const char* Name() const { return "BloomFilter2"; }
  void CreateFilter(int n){
    // Compute bloom filter size (in both bits and bytes)
    bits_ = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits_ < 64) bits_ = 64;

    size_t bytes = (bits_ + 7) / 8;
    bits_ = bytes * 8;

    const size_t init_size = dst_.size();
    dst_.resize(init_size + bytes, 0);
    dst_.push_back(static_cast<char>(k_));  // Remember # of probes in filter
    array_ = &dst_[init_size];
  }
  void CreateFilter(int n, std::string* dst){
    // Compute bloom filter size (in both bits and bytes)
    bits_ = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits_ < 64) bits_ = 64;

    size_t bytes = (bits_ + 7) / 8;
    bits_ = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    array_ = &(*dst)[init_size];
  }

  void insertKey(const std::string& key){
      uint32_t h = MurMurHash2(key.c_str(), key.size());
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits_;
        array_[bitpos / 8] |= (1 << (bitpos % 8));
        h += delta;
      }
  }

  // void CreateFilter(const std::string* keys, int n,
  //                   std::string* dst) {
  //   // Compute bloom filter size (in both bits and bytes)
  //   bits_ = n * bits_per_key_;

  //   // For small n, we can see a very high false positive rate.  Fix it
  //   // by enforcing a minimum bloom filter length.
  //   if (bits_ < 64) bits_ = 64;

  //   size_t bytes = (bits_ + 7) / 8;
  //   bits_ = bytes * 8;

  //   const size_t init_size = dst->size();
  //   dst->resize(init_size + bytes, 0);
  //   dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
  //   array_ = &(*dst)[init_size];
  //   for (int i = 0; i < n; i++) {
  //   //BloomFilter理论是通过多个hash计算来减少冲突，
  //    //double-hashing的方式来达到同样的效果。
  //    //double-hashing的理论如下：
  //     //1、计算hash值；
  //     //2、hash值的高15位，低17位对调
  //     //3、按k_个数来存储当前hash值。
  //     //3-1、计算存储位置；
  //     //3-2、按bit存；
  //     //3-3、累加hash值用于下次计算 
  //     // Use double-hashing to generate a sequence of hash values.
  //     // See analysis in [Kirsch,Mitzenmacher 2006].
  //     uint32_t h = MurMurHash2(keys[i].c_str(), keys[i].size());
  //     const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
  //     for (size_t j = 0; j < k_; j++) {
  //       const uint32_t bitpos = h % bits_;
  //       array_[bitpos / 8] |= (1 << (bitpos % 8));
  //       h += delta;
  //     }
  //   }
  // }

  bool KeyMayMatch(const std::string& key) {
    const size_t len = dst_.size();
    if (len < 2) return false;

    const char* array = dst_.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }
    
    uint32_t h = MurMurHash2(key.c_str(), key.size());
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }

  bool KeyMayMatch(const std::string& key,
                   const std::string& bloom_filter) {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }
    
    uint32_t h = MurMurHash2(key.c_str(), key.size());
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }
  // Return a new filter policy that uses a bloom filter with approximately
  // the specified number of bits per key.  A good value for bits_per_key
  // is 10, which yields a filter with ~ 1% false positive rate.
 private:
  size_t bits_per_key_ = 10;
  size_t k_;
  size_t bits_;
  char* array_ = nullptr;
  std::string dst_;
};
}  // namespace hard_core

#endif  // STORAGE_LEVELDB_UTIL_ARENA_H_